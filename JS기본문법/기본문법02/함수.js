// 함수
/*
- 일반적으로 반복되는 코드를 하나로 묶거나, 의미를 부여하고 역할을 나누기 위해 사용합니다.
- 변수 선언, 조건문과 더불어 가장 많이 사용 할 문법이므로 잘 익혀두시는게 좋습니다.

function 함수이름(인자1, 인자2, 인자3) {
  // 명령문
}

함수이름(인수1, 인수2, 인수3); // 명령문에 있는 내용을 실행한다.

- 인자(Parameter 또는 매개변수)란 함수를 호출할때 전달 받기 위해 지정한 변수를 뜻하며, 몇개든 콤마를 이어붙여 입력받을 수 있습니다.
- 인수(Argument)란 인자에 전달하는 값 그 자체를 일컫습니다.

- 함수는 `return` 키워드로 값을 반환할 수 있습니다.
*/

/* 구현 해보기 */
/* 
- 요구사항 -
- persons 변수로 입력받은 값의 사람들에게 맥주 주문을 받습니다.
- 성인(19세 이상)인 경우에만 맥주 주문을 받아 맥주를 제공할 수 있도록 해주세요.
- 성인에게 주문을 받은 경우 "맥주 나왔습니다! [주문한 사람 이름]님" 처럼 출력합니다.
- 미성인에게 주문을 받은 경우 "나이 더 먹고 오세요! [주문한 사람 이름]님" 처럼 출력합니다.
*/

let persons = [{name: '정민수', age: 24},{name: '홍길동', age: 19}];

function beerOrder (order) {
    for (let person of order) {
        if (person.age > 19) {
            console.log('맥주 나왔습니다!', person.name, '님');
        } else {
            console.log('나이 더 먹고 오세요!',person.name, '님');
        }
    }
}

beerOrder(persons)

/* 
- 화살표 함수 -
문법의 생김새 처럼 화살표 모양을 하고 있어 이러한 이름이 붙게 되었고, 이를 이용해 기존 함수보다 더 간결한 문법으로 함수를 만들 수 있습니다.
*/

// 일반 형태
const sum = function (a, b) {
    return a + b;
}

// 화살표 함수 표현식 (1) 기본형태
const sum1 = (a, b) => {
    return a + b;
}

// 화살표 함수 표현식 (2) return 생략 / 여러 줄의 코드를 포함 할 땐 기본 형태 사용해야함
const sum2 = (a, b) => a + b;

// 화살표 함수 표현식 (3) 인자 괄호 생략 형태 / 하나의 인자를 입력 받는 경우
const hello = a => {
    return a;
}
hello('hi'); // hi

/*
- 익명 함수 -

- 익명 함수는 일반 함수와 다르게 함수의 이름이 존재하지 않고 변수에 함수를 담아 사용하는 함수입니다.
- 변수에 값을 저장하는 방법처럼 변수에 함수를 저장해서 사용합니다.
*/
// 일반 함수
function foo() {
    console.log("bar");
}
  
// 익명 함수
let foo = function () {
    console.log("bar");
};

/*
- 익명 함수는 주로 재사용 되지 않고 한번만 사용되는 함수일 경우에 자주 사용하게 되는데, 이는 일회성인 함수를 일반 함수로 구현 함으로서 불필요한 메모리를 차지하는것을 방지하여 메모리 낭비를 줄일 수 있다는 장점 때문에 주로 사용됩니다.
- 하지만 익명 함수 또한 단점이 있는데 밑에서 소개할 Hoisting이 적용되지 않는다는 단점이 있습니다.

-일반적으로 작성된 함수의 경우 함수 선언보다 호출이 위에 있더라도 호출하는 위치에 상관없이 사용될 수 있지만, 익명함수의 경우 Hoisting이 적용되지 않아 에러가 나오게 됩니다.
*/

// 일반 함수로 선언부보다 위에서 함수를 호출했을 때
hello(); // hello!

function hello() {
  console.log("hello!");
}

// 익명 함수의 경우
hello(); // Uncaught ReferenceError: Cannot access 'hello' before initialization

const hello = function() {
  console.log("hello!");
}

