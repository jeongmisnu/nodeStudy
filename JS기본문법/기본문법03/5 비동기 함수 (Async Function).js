// 비동기 함수 (Async Function)
/*
- 특징
  비동기 함수는 일반 함수나 화살표 함수와 아주 비슷하지만 딱 두가지만 다릅니다.
    
  1. 비동기 함수의 결과 값은 항상 Promise 객체로 resolve된다.
  2. 비동기 함수 안에서만 await 연산자를 사용할 수 있다. (바로 아래에서 배웁니다!)
    
  이 두가지 특징을 제외하면 기존처럼 일반 함수나, 화살표 함수처럼 사용할 수 있습니다. 아래처럼요.
  아래 세가지 함수 모두 결과 값은 Promise로 받습니다.
*/
// 비동기 + 일반 함수
async function 함수이름() {
	// 명령문
}

// 비동기 + 익명 함수
let 익명 = async function () {
  // 명령문
}

// 비동기 + 화살표 함수
async () => {
	// 명령문
}

// 이러한 특징은 마치 아래처럼 작성하는것과 굉장히 비슷합니다.

function 함수이름() {
	return Promise.resolve('값');
}

// 위와 아래의 함수는 같은 동작을 보여준다.

async function 함수이름2() {
	return '값';
}

함수이름();
// Print: Promise { '값' }

함수이름2();
// Print: Promise { '값' }

/*
- 그럼 비동기 함수는 왜 쓸까요? -
  아래에서 배울 await 연산자를 비동기 함수 안에서만 사용할 수 있는데요, 이를 활용하면 문법이 훨씬 간결해질 수 있습니다.
  덕분에 비동기 함수는 여러분이 비동기 프로그래밍을 하게 되면 즐겨 사용하는 함수 유형중 하나가 될 것 입니다. 😇
new Promise(executor) 코드로 프로미스를 직접 생성하면 executor가 바로 실행되는것과 달리, 비동기 함수는 함수가 실행되기 전까지 프로미스를 생성하지 않습니다.
*/